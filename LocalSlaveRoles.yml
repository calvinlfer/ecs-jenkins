AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Creates roles for jenkins slave tasks. This is meant to be used when ECR resides in the same account as Jenkins.
  This will allow Jenkins slaves that use this IAM role to push to any ECR repository in the same AWS account.
Parameters:
  JenkinsCacheBucket:
    Description: The name of the jenkins cache bucket
    Type: String
  JenkinsArtifactBucket:
    Description: The name of the jenkins artifact bucket (i.e. JARs)
    Type: String
  S3DeploymentBucketArns:
    Type: List<String>
    Description: List of S3 bucket ARNs to give access for deployment
Conditions:
  CreateS3DeploymentBucketPolicy: !Not [ !Equals [ '', !Join ['', !Ref S3DeploymentBucketArns] ] ]
Resources:
  JenkinsSlaveRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: JenkinsSlaveRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: JenkinsSlaveECRLocalPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - ecr:*
            Resource: !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/*'
          - Effect: Deny
            Action:
              - ecr:BatchDeleteImage
              - ecr:DeleteRepositoryPolicy
              - ecr:SetRepositoryPolicy
            Resource: !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/*'
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
            Resource: '*'
      - PolicyName: JenkinsSlaveS3Cache
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${JenkinsCacheBucket}/*'
          - Effect: Allow
            Action:
            - s3:ListBucket
            Resource: !Sub 'arn:aws:s3:::${JenkinsCacheBucket}'
      - # This IAM policy is temporary (remove once we stop storing Maven/Ivy2 artifacts are not stored in S3)
        PolicyName: JenkinsSlaveS3Artifact
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${JenkinsArtifactBucket}/*'
          - Effect: Allow
            Action:
            - s3:ListBucket
            Resource: !Sub 'arn:aws:s3:::${JenkinsArtifactBucket}'
  JenkinsSlaveRoleS3DeploymentBucketPolicy:
    Type: AWS::IAM::Policy
    Condition: CreateS3DeploymentBucketPolicy
    Properties:
      Roles: [!Ref JenkinsSlaveRole]
      PolicyName: S3DeploymentBucketPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Resource: !Ref S3DeploymentBucketArns
          Action:
          - s3:ListBucket
        - Effect: Allow
          Resource: !Split [',', !Join ['', [!Join ['/*,', !Ref S3DeploymentBucketArns], '/*']]]
          Action:
          - s3:GetObject
          - s3:PutObject
          - s3:ListMultipartUploadParts

Outputs:
  TaskRoleArn:
    Description: The ARN of the jenkins slave role
    Value: !GetAtt JenkinsSlaveRole.Arn
