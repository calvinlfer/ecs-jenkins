AWSTemplateFormatVersion: '2010-09-09'
Description: Creates a jenkins master service in an existing ECS cluster
Parameters:
  ClusterStackName:
    Description: Name of an active CloudFormation stack that contains an ECS cluster
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*$
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets in which load balancer will run (Private)
  AllowedCidr:
    Description: The IP address range that source traffic to the jenkins master is allowed
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x. 
  MasterLogRetention:
    Type: Number
    Description: Number of days to retain logs for the jenkins-master in CWL
    Default: '14'
  SlaveLogRetention:
    Type: Number
    Description: Number of days to retain logs for the jenkins slaves in CWL
    Default: '1'
  HostedZoneName:
    Type: String
    Description: The domain of the hosted zone ending with a period
  CertificateArn:
    Type: String
    Description: The ARN of a certificate to attach to the Load Balancer.
  KinesisStackName: 
    Type: String
    Description: The name of an existing Kinesis Stack used for streaming logs from cloudwatch to another destination
  S3BackupBucketExists:
    Default: 'no'
    Description: If set to yes, an existing bucket will be used. Otherwise it will be created
    Type: String
    AllowedValues:
    - 'yes'
    - 'no'  
  S3BackupBucketName:
    Type: String
    Description: The name of the S3 Bucket to which the Jenkins master has read/write access for backups
Conditions:
  CreateS3Bucket: !Equals [!Ref 'S3BackupBucketExists', 'no']
Resources:
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Jenkins ELB Security Group
      VpcId: !ImportValue
        Fn::Sub: ${ClusterStackName}-VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !Ref 'AllowedCidr'
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref 'AllowedCidr'
      - IpProtocol: tcp
        FromPort: 50000
        ToPort: 50000
        # only allow instances in the cluster to talk on the slave port
        SourceSecurityGroupId: !ImportValue
          Fn::Sub: ${ClusterStackName}-EcsSecurityGroupId
      Tags:
      - Key: Name
        Value: !Sub 'ECS Jenkins ELB SG - ${AWS::StackName}'
  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Scheme: internal
      Subnets: !Ref 'SubnetIds'
      SecurityGroups:
      - !Ref 'ELBSecurityGroup'
      - !ImportValue
        Fn::Sub: ${ClusterStackName}-EcsLoadBalancerSecurityGroupId
      Listeners:
      - InstancePort: '40000'
        InstanceProtocol: HTTP
        LoadBalancerPort: '80'
        Protocol: HTTP      
      - InstancePort: '40000'
        InstanceProtocol: HTTP
        LoadBalancerPort: '443'
        Protocol: HTTPS
        SSLCertificateId: !Ref 'CertificateArn'
      - InstancePort: '50000'
        InstanceProtocol: TCP
        LoadBalancerPort: '50000'
        Protocol: TCP
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '30'
        Target: TCP:40000
        Timeout: '5'
        UnhealthyThreshold: '5'
      Tags:
      - Key: Name
        Value: !Sub 'ECS Jenkins ELB - ${AWS::StackName}'
  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: JenkinsMasterPolicy
        PolicyDocument:
          Statement:
          - Sid: Stmt1452746887373
            Action:
            - ecs:RegisterTaskDefinition
            - ecs:ListClusters
            - ecs:ListTaskDefinitions
            - ecs:DescribeTaskDefinition
            - ecs:DescribeContainerInstances
            Effect: Allow
            Resource: '*'
          - Sid: Stmt1452746887374
            Action:
            - ecs:StopTask
            - ecs:ListContainerInstances
            Effect: Allow
            Resource: !Join [/, [!Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster',
                !ImportValue {'Fn::Sub': '${ClusterStackName}-ClusterName'}]]
          - Sid: Stmt1452746887375
            Action:
            - ecs:RunTask
            Effect: Allow
            Resource: !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/jenkins-slave-*'
          - Sid: Stmt1452746887376
            Action:
            - ecs:StopTask
            - ecs:DescribeTasks
            Effect: Allow
            Resource: !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/*'
            # To allow the master to assign a taskRole to a slave task def
          - Sid: Stmt1452746887377
            Action:
            - iam:PassRole
            Effect: Allow
            Resource: 'arn:aws:iam::444913385113:role/*'
      - PolicyName: JenkinsMasterS3Backup
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: Stmt1500512896858
            Action:
            - s3:ListBucket
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${S3BackupBucketName}'
          - Sid: Stmt1500512926608
            Action:
            - s3:GetObject
            - s3:PutObject
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${S3BackupBucketName}/*'
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
      - Name: jenkins
        Image: loyaltyone/jenkins
        Hostname: jenkins
        Cpu: 512
        Memory: 2048
        Environment:
        - Name: JAVA_OPTS
          Value: -Djenkins.install.runSetupWizard=false
        # We will run as this user (docker-user) 
        - Name: LOCAL_USER_ID
          Value: 5001
        # EFS group  
        - Name: LOCAL_USER_GID
          Value: 555
        Essential: true
        MountPoints:
        - ContainerPath: /var/jenkins_home
          SourceVolume: efs-jenkins
          ReadOnly: false
        PortMappings:
        - HostPort: 40000
          ContainerPort: 8080
        - HostPort: 50000
          ContainerPort: 50000
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'MasterLogGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: ecs
      Volumes:
      - Name: efs-jenkins
        Host:
          SourcePath: !Sub
            - ${MountPath}/docker-user/jenkins
            - MountPath:
                Fn::ImportValue: !Sub '${ClusterStackName}-MountPath'
      TaskRoleArn: !Ref 'EcsTaskRole'
  Service:
    Type: AWS::ECS::Service
    DependsOn: MasterLogGroup
    Properties:
      ServiceName: jenkins-master
      Role: !ImportValue
        Fn::Sub: ${ClusterStackName}-EcsServiceRole
      TaskDefinition: !Ref 'TaskDefinition'
      DesiredCount: 1
      LoadBalancers:
      - ContainerName: jenkins
        ContainerPort: '8080'
        LoadBalancerName: !Ref 'LoadBalancer'
      Cluster: !ImportValue
        Fn::Sub: ${ClusterStackName}-ClusterName
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
  MasterLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref 'MasterLogRetention'
      LogGroupName: !Sub '${AWS::StackName}-master'
  SlaveLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref 'SlaveLogRetention'
      LogGroupName: !Sub '${AWS::StackName}-slave'
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties: 
      AliasTarget:
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneNameID
        DNSName: !GetAtt LoadBalancer.DNSName
      HostedZoneName: !Ref 'HostedZoneName'
      Name: !Sub 'jenkins.${HostedZoneName}'
      Type: A
  # Subscribes to jenkins audit logs (see Audit Trail Plugin)    
  SubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn:
    - MasterLogGroup
    Properties:
      RoleArn: !ImportValue
        Fn::Sub: ${KinesisStackName}-Role-Arn
      LogGroupName: !Ref 'MasterLogGroup'
      FilterPattern: "AUDIT"
      DestinationArn: !ImportValue
        Fn::Sub: ${KinesisStackName}-Stream-Arn
  S3Bucket:
    Condition: CreateS3Bucket
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref 'S3BackupBucketName'
    DeletionPolicy: Retain              
Outputs:
  Service:
    Description: The name of the ECS service created
    Value: !GetAtt Service.Name
    Export:
      Name: !Sub '${AWS::StackName}-ServiceName'
  TaskArn:
    Description: The ARN of the task created for the service
    Value: !Ref 'TaskDefinition'
  LoadBalancerDNS:
    Description: The dns name of the app load balancer for the service
    Value: !GetAtt [LoadBalancer, DNSName]
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerDNSName'
  LoadBalancer:
    Description: The ARN of the app load balancer for the service
    Value: !Ref 'LoadBalancer'
  MasterLogGroup:
    Description: The name of the log group created/used for the jenkins master
    Value: !Ref 'MasterLogGroup'
    Export:
      Name: !Sub '${AWS::StackName}-MasterLogGroupName'
  SlaveLogGroup:
    Description: The name of the log group created/used for the jenkins slave
    Value: !Ref 'SlaveLogGroup'
    Export:
      Name: !Sub '${AWS::StackName}-SlaveLogGroupName'
  S3BackupBucket:
    Description: The name of the S3 bucket to which Jenkins can store backups
    Value: !Ref 'S3BackupBucketName'
    Export:
      Name: !Sub '${AWS::StackName}-S3BackupBucket'
